#!/bin/sh
#
# @author    Patrick Plocke <patrick@plocke.de>
# @gpg key   0x28BF179F
# @date      2015-12-29
# @licencse  MIT http://opensource.org/licenses/MIT
# @version   0.8
#
# Script to dump databases one by one
#
# Exit Codes
# ---------------------
# * 0: Success
# * 1: Script specific: (writeable directory, config file not found, wrong permissions)
# * 2: Required binary not found
# * 3: MySQL connection error
# * 4: MySQL Database dump error


################################################################################
#
# VARIABLES
#
################################################################################

#
# Adjust the following values with caution!
#


# Configuration
CONFIG_NAME="mysqldump-secure.conf"
CONFIG_FILE="/etc/${CONFIG_NAME}"


# These command line arguments are considered insecure and can lead
# to compromising your data
MYSQL_EVIL_OPTS="--password -p"

# Do not allow to read any other file than the one specified in
# the configuration.
MYSQL_BAD_OPTS="--defaults-extra-file --defaults-file"


# Deault Variables
PREFIX_DEFAULT="$(date '+%Y-%m-%d')_$(date '+%H-%M')__"
TARGET_DIR_CHMOD_DEFAULT="700"
TARGET_FILE_CHMOD_DEFAULT="400"
OPENSSL_ALGO_ARG_DEFAULT="-aes256"


################################################################################
#
# HELPER FUNCTIONS
#
################################################################################

# Output to stdout/stderr and to file
debug() {
	_lvl="${1}"		# Loglevel: "info", "warn" or "err"
	_msg="${2}"		# message to output
	_log="${3}"		# log to file?
	_file="${4}"	# full path to logfile

	[ "${_lvl}" = "info" ] && printf "%s\n" "${_msg}"
	[ "${_lvl}" = "warn" ] && printf "%s\n" "${_msg}" 1>&2	# stdout -> stderr
	[ "${_lvl}" = "err"  ] && printf "%s\n" "${_msg}" 1>&2	# stdout -> stderr
	[ "${_log}" = "1"    ] && printf "%s %s %s\n" "$(date '+%Y-%m-%d')" "$(date '+%H:%M:%S')" "${_msg}" >> "${_file}"
	return 0
}
# Inline Output to stdout/stderr and to file
debugi() {
	_lvl="${1}"		# Loglevel: "info", "warn" or "err"
	_msg="${2}"		# message to output
	_log="${3}"		# log to file?
	_file="${4}"	# full path to logfile

	[ "${_lvl}" = "info" ] && printf "%s" "${_msg}"
	[ "${_lvl}" = "warn" ] && printf "%s" "${_msg}" 1>&2	# stdout -> stderr
	[ "${_lvl}" = "err"  ] && printf "%s" "${_msg}" 1>&2	# stdout -> stderr
	[ "${_log}" = "1"    ] && printf "%s %s %s" "$(date '+%Y-%m-%d')" "$(date '+%H:%M:%S')" "${_msg}" >> "${_file}"
	return 0
}
# Output to stdout/stderr and to file (No date output)
debugn() {
	_lvl="${1}"		# Loglevel: "info", "warn" or "err"
	_msg="${2}"		# message to output
	_log="${3}"		# log to file?
	_file="${4}"	# full path to logfile

	[ "${_lvl}" = "info" ] && printf "%s\n" "${_msg}"
	[ "${_lvl}" = "warn" ] && printf "%s\n" "${_msg}" 1>&2	# stdout -> stderr
	[ "${_lvl}" = "err"  ] && printf "%s\n" "${_msg}" 1>&2	# stdout -> stderr
	[ "${_log}" = "1"    ] && printf "%s\n" "${_msg}" >> "${_file}"
	return 0
}


# Test if argument is an integer
# @param  mixed
# @return integer	0: is number | 1: not a number
isint(){
	printf '%d' "$1" >/dev/null 2>&1 && return 0 || return 1;
}


# Sum up two numbers
# @param  integer
# @param  integer
# @return integer
sum() {
	echo  | awk -v "a=${1}" -v "b=${2}" '{print a + b}'
}


# Get Operating system independent numerical chmod value
# @param  string	path to file/folder
# @return string	numerical chmod
permission() {
	_file="${1}"

	# e.g. 640
	if [ "$(uname)" = "Linux" ]; then
		_perm="$(stat --format '%a' "${_file}")"
	else # Darwin or FreeBSD
		_perm="$(stat -f "%OLp" "${_file}")"
	fi

	echo "${_perm}"
	return 0
}

# Validate chmod value
# @param  string	numerical chmod
# @return boolean	0: valid, 1: invalid
valid_chmod() {
	CHMOD=${1}

	len=$(echo "${CHMOD}" | awk '{ print length()   }')
	if [ "${len}" != "3" ]; then
		return 1
	fi

	r=$(echo "${CHMOD}" | awk '{print substr($0,1,1)}')
	w=$(echo "${CHMOD}" | awk '{print substr($0,2,1)}')
	x=$(echo "${CHMOD}" | awk '{print substr($0,3,1)}')

	if [ "$r" -lt 0 ] || [ "$r" -gt 7 ]; then
		return 1
	fi
	if [ "$w" -lt 0 ] || [ "$w" -gt 7 ]; then
		return 1
	fi
	if [ "$x" -lt 0 ] || [ "$x" -gt 7 ]; then
		return 1
	fi

	# All good
	return 0
}


################################################################################
#
# ENTRY POINT: ERROR CHECKING
#
################################################################################


############################################################
# Config FIle
############################################################

if [ ! -f "${CONFIG_FILE}" ]; then
	debug "err" "[ERR]  Configuration file not found in ${CONFIG_FILE}"
	debug "err" "Aborting"
	exit 1
fi
if [ ! -r "${CONFIG_FILE}" ]; then
	debug "err" "[ERR]  Configuration file is not readable in ${CONFIG_FILE}"
	debug "err" "Aborting"
	exit 1
fi
if [ "$(permission "${CONFIG_FILE}")" != "400" ]; then
	debug "err" "[ERR]  Configuration file ${CONFIG_FILE} has dangerous permissions: $(permission "${CONFIG_FILE}")."
	debug "err" "[ERR]  Fix it to 400"
	debug "err" "Aborting"
	exit 1
fi

# Read config file
# Comment required by shellcheck,
# See problem here: https://github.com/koalaman/shellcheck/wiki/SC1090
# shellcheck disable=SC1090
. "${CONFIG_FILE}"




############################################################
# Logging Options
############################################################

# Be really strict on checking if we are going to log to file
# or not. Also make sure that the logfile is writeable and
# that no other has read permissions to the file.
if [ -z "${LOG}" ]; then
	debug "warn" "[WARN] \$LOG variable is not set or empty in ${CONFIG_FILE}"
	debug "warn" "[WARN] Logging disabled"
	LOG=0
elif [ "${LOG}" = "1" ]; then
	# Logfile not set
	if [ -z "${LOGFILE}" ]; then
		debug "warn" "[WARN] \$LOGFILE variable is not set or empty in ${CONFIG_FILE}"
		debug "warn" "[WARN] Logging disabled"
		LOG=0
	# Logfile not found
	elif [ ! -f "${LOGFILE}" ]; then
		debug  "warn" "[WARN] Logfile does not exist in ${LOGFILE}"
		debugi "info" "[INFO] Trying to create..."

		if ! touch "${LOGFILE}" > /dev/null 2>&1 ; then
			debugn "err"  "Failed"
			debug  "err"  "[ERR]  Failed to create file ${LOGFILE}"
			debug  "warn" "[WARN] Logging disabled"
			LOG=0
		else
			debugn "info" "OK"
			debug  "info" "[INFO] Created file ${LOGFILE}"
			debugi "info" "[INFO] Trying to chmod..."

			if ! chmod 600 "${LOGFILE}" > /dev/null 2>&1 ; then
				debugn "err"  "Failed"
				debug  "err"  "[ERR]  Failed to chmod 600 ${LOGFILE}"
				debug  "warn" "[WARN] Logging disabled"
				LOG=0
			else
				debugn "info" "OK"
			fi
		fi
	# Logfile not writeable
	elif [ ! -w "${LOGFILE}" ]; then
		debug  "warn" "[WARN] Logfile ${LOGFILE} not writeable"
		debugi "info" "[INFO] Trying to chmod..."

		if ! chmod 600 "${LOGFILE}" > /dev/null 2>&1 ; then
			debugn "err"  "Failed"
			debug  "err"  "[ERR]  Failed to chmod 600 ${LOGFILE}"
			debug  "warn" "[WARN] Logging disabled"
			LOG=0
		else
			# Check again if it is writeable now?
			if [ ! -w "${LOGFILE}" ]; then
				debug  "warn" "[WARN] Logfile ${LOGFILE} still not writeable"
				debug  "warn" "[WARN] Logging disabled"
				LOG=0
			else
				debugn "info" "OK"
			fi
		fi
	# Logfile has wrong permissions
	elif [ "$(permission "${LOGFILE}")" != "600" ]; then
		debug  "warn" "[WARN] Logfile has dangerous permissions: $(permission "${LOGFILE}")"
		debugi "info" "[INFO] Trying to chmod..."

		if ! chmod 600 "${LOGFILE}" > /dev/null 2>&1 ; then
			debugn "err"  "Failed"
			debug  "err"  "[ERR]  Failed to chmod 600 ${LOGFILE}"
			debug  "warn" "[WARN] Logging disabled"
			LOG=0
		else
			debugn "info" "OK"
		fi
	fi
else
	debug "info" "[INFO] Logging not enabled in ${CONFIG_FILE}"
	LOG=0
fi

# Is logging still enabled after all checks?
# Write to the file
if [ "${LOG}" = "1" ]; then
	{
		echo;
		echo "--------------------------------------------------------------------------------";
		echo "$(date '+%Y-%m-%d') $(date '+%H:%M:%S') Starting";
	} >> "${LOGFILE}"
	debug "info" "[INFO] Logging enabled" ${LOG} "${LOGFILE}"
fi



############################################################
# Destination Directory and Prefix
############################################################

# Check if CHMOD exists, otherwise use default values
if [ -z "${TARGET_DIR_CHMOD}" ]; then
	debug "warn" "[WARN] \$TARGET_DIR_CHMOD is not set or empty in ${CONFIG_FILE}" $LOG "${LOGFILE}"
	debug "warn" "[WARN] Setting \$TARGET_DIR_CHMOD to ${TARGET_DIR_CHMOD_DEFAULT}" $LOG "${LOGFILE}"
	TARGET_DIR_CHMOD=${TARGET_DIR_CHMOD_DEFAULT}
fi
if [ -z "${TARGET_FILE_CHMOD}" ]; then
	debug "warn" "[WARN] \$TARGET_FILE_CHMOD is not set or empty in ${CONFIG_FILE}" $LOG "${LOGFILE}"
	debug "warn" "[WARN] Setting \$TARGET_FILE_CHMOD to ${TARGET_FILE_CHMOD_DEFAULT}" $LOG "${LOGFILE}"
	TARGET_FILE_CHMOD=${TARGET_FILE_CHMOD_DEFAULT}
fi
if ! valid_chmod "${TARGET_DIR_CHMOD}" > /dev/null 2>&1; then
	debug "err"  "[ERR]  Invalid chmod value for \$TARGET_DIR_CHMOD: ${TARGET_DIR_CHMOD} in ${CONFIG_FILE}" $LOG "${LOGFILE}"
	debug "info" "[INFO] Setting \$TARGET_DIR_CHMOD to ${TARGET_DIR_CHMOD_DEFAULT}" $LOG "${LOGFILE}"
	TARGET_DIR_CHMOD=${TARGET_DIR_CHMOD_DEFAULT}
fi
if ! valid_chmod "${TARGET_FILE_CHMOD}" > /dev/null 2>&1; then
	debug "err"  "[ERR]  Invalid chmod value for \$TARGET_FILE_CHMOD: ${TARGET_FILE_CHMOD} in ${CONFIG_FILE}" $LOG "${LOGFILE}"
	debug "info" "[INFO] Setting \$TARGET_FILE_CHMOD to ${TARGET_FILE_CHMOD_DEFAULT}" $LOG "${LOGFILE}"
	TARGET_FILE_CHMOD=${TARGET_FILE_CHMOD_DEFAULT}
fi



# Check if destination dir exists
if [ -z "${TARGET}" ]; then
	debug "err" "[ERR]  \$TARGET variable is not set or empty in ${CONFIG_FILE}" $LOG "${LOGFILE}"
	debug "err" "Aborting" $LOG "${LOGFILE}"
	exit 1
elif [ ! -d "${TARGET}" ]; then
	debug  "warn" "[WARN] Destination dir ${TARGET} does not exist" $LOG "${LOGFILE}"
	debugi "info" "[INFO] Trying to create... " $LOG "${LOGFILE}"
	if ! mkdir -p "${TARGET}" > /dev/null 2>&1 ; then
		debugn "err"  "Failed" $LOG "${LOGFILE}"
		debug  "err"  "Aborting" $LOG "${LOGFILE}"
		exit 1
	else
		debugn "info" "Done" $LOG "${LOGFILE}"
		debug  "info" "[INFO] Adjusting file permissions to ${TARGET_DIR_CHMOD} on ${TARGET}" $LOG "${LOGFILE}"
		chmod ${TARGET_DIR_CHMOD} "${TARGET}"
	fi
fi

# Check if destination dir is writeable
if [ ! -w "${TARGET}" ]; then
	debug  "warn" "[WARN] Destination dir ${TARGET} is not writeable" $LOG "${LOGFILE}"
	debugi "info" "[INFO] Trying to chmod to ${TARGET_DIR_CHMOD}... " $LOG "${LOGFILE}"
	if ! chmod ${TARGET_DIR_CHMOD} "${TARGET}" > /dev/null 2>&1 ; then
		debugn "err"  "Failed" $LOG "${LOGFILE}"
		debug  "err"  "Aborting" $LOG "${LOGFILE}"
		exit 1
	else
		debugn "info" "Done" $LOG "${LOGFILE}"
	fi
	debugi "info" "[INFO] Trying to chown... " $LOG "${LOGFILE}"
	if ! chown "$(whoami)" "${TARGET}" > /dev/null 2>&1 ; then
		debugn "err"  "Failed" $LOG "${LOGFILE}"
		debug  "err"  "Aborting" $LOG "${LOGFILE}"
		exit 1
	else
		debugn "info" "Done" $LOG "${LOGFILE}"
	fi
fi
# Check correct permissions of destination dir
if [ "$(permission "${TARGET}")" != "${TARGET_DIR_CHMOD}" ]; then
	debug  "err"  "[ERR]  Target directory has wrong permissions: $(permission "${TARGET}"), but should ${TARGET_DIR_CHMOD}." $LOG "${LOGFILE}"
	debugi "info" "[INFO] Trying to chmod to ${TARGET_DIR_CHMOD}... " $LOG "${LOGFILE}"

	if ! chmod "${TARGET_DIR_CHMOD}" "${TARGET}" > /dev/null 2>&1 ; then
		debugn "err"  "Failed" $LOG "${LOGFILE}"
		debug  "err"  "Aborting" $LOG "${LOGFILE}"
		exit 1
	else
		debugn "info" "Done" $LOG "${LOGFILE}"
	fi
fi


# Check output Prefix
if [ -z "${PREFIX}" ]; then
	debug "warn" "[WARN] \$PREFIX variable is not set or empty in ${CONFIG_FILE}" $LOG "${LOGFILE}"
	debug "warn" "[WARN] Using default 'date-time' prefix: ${PREFIX_DEFAULT}" $LOG "${LOGFILE}"
	PREFIX="${PREFIX_DEFAULT}"
fi



############################################################
# MySQL
############################################################
if [ -z "${MYSQL_CNF_FILE}" ]; then
	debug "err" "[ERR]  \$MYSQL_CNF_FILE variable is not set or empty in ${CONFIG_FILE}" $LOG "${LOGFILE}"
	debug "err"  "Aborting" $LOG "${LOGFILE}"
	exit 1
fi
if [ ! -f "${MYSQL_CNF_FILE}" ]; then
	debug "err"  "[ERR]  MySQL Configuration file not found in ${MYSQL_CNF_FILE}" $LOG "${LOGFILE}"
	debug "err"  "Aborting" $LOG "${LOGFILE}"
	exit 1
fi
if [ ! -r "${MYSQL_CNF_FILE}" ]; then
	debug "err"  "[ERR]  MySQL Configuration file is not readable in ${MYSQL_CNF_FILE}" $LOG "${LOGFILE}"
	debug "err"  "Aborting" $LOG "${LOGFILE}"
	exit 1
fi
if [ "$(permission "${MYSQL_CNF_FILE}")" != "400" ]; then
	debug "err"  "[ERR]  MySQL Configuration file ${MYSQL_CNF_FILE} has dangerous permissions: $(permission "${MYSQL_CNF_FILE}")." $LOG "${LOGFILE}"
	debug "err"  "[ERR]  Fix it to 400" $LOG "${LOGFILE}"
	debug "err"  "[ERR]  Change your database password!" $LOG "${LOGFILE}"
	debug "err"  "Aborting" $LOG "${LOGFILE}"
	exit 1
fi
if ! command -v mysql > /dev/null 2>&1 ; then
	debug "err"  "[ERR]  'mysql' not found" $LOG "${LOGFILE}"
	debug "err"  "Aborting" $LOG "${LOGFILE}"
	exit 2
fi
if ! command -v mysqldump > /dev/null 2>&1 ; then
	debug "err"  "[ERR]  'mysqldump' not found" $LOG "${LOGFILE}"
	debug "err"  "Aborting" $LOG "${LOGFILE}"
	exit 2
fi
# Testing MySQL connection
if ! $(which mysql) --defaults-extra-file="${MYSQL_CNF_FILE}" -e exit > /dev/null 2>&1 ; then
	debug "err"  "[ERR]  Cannot connect to mysql database. Check credentials in ${MYSQL_CNF_FILE}" $LOG "${LOGFILE}"
	debug "err"  "Aborting" $LOG "${LOGFILE}"
	exit 3
fi



############################################################
# Bad MySQL Opts
############################################################
for opt in ${MYSQL_OPTS}; do
	for evil in ${MYSQL_EVIL_OPTS}; do
		if [ "${opt}" = "${evil}" ]; then
			debug "err"  "[ERR]  Insecure mysqldump option found in MYSQL_OPTS: '${evil}'" $LOG "${LOGFILE}"
			debug "err"  "Aborting" $LOG "${LOGFILE}"
			exit 3
		fi
	done
	for bad in ${MYSQL_BAD_OPTS}; do
		if [ "${opt}" = "${evil}" ]; then
			debug "err"  "[ERR]  Disallowed mysqldump option found in MYSQL_OPTS: '${bad}'" $LOG "${LOGFILE}"
			debug "err"  "Aborting" $LOG "${LOGFILE}"
			exit 3
		fi
	done
done



############################################################
# IGNORE/REQUIRE
############################################################
if [ -z "${IGNORE}" ]; then
	debug "warn" "[INFO] \$IGNORE variable is not set or empty in ${CONFIG_FILE}" $LOG "${LOGFILE}"
	debug "warn" "[INFO] No database will be ignored" $LOG "${LOGFILE}"
	IGNORE=""
fi
if [ -z "${REQUIRE}" ]; then
	debug "warn" "[INFO] \$REQUIRE variable is not set or empty in ${CONFIG_FILE}" $LOG "${LOGFILE}"
	debug "warn" "[INFO] No database will explicitly be required" $LOG "${LOGFILE}"
	REQUIRE=""
fi



############################################################
# Compression
############################################################
if [ -z "${COMPRESS}" ]; then
	debug "warn" "[WARN] \$COMPRESS variable is not set or empty in ${CONFIG_FILE}" $LOG "${LOGFILE}"
	debug "warn" "[WARN] Compression disabled" $LOG "${LOGFILE}"
	COMPRESS=0
fi
if [ "${COMPRESS}" = "1" ]; then
	if ! command -v "${COMPRESSOR}" > /dev/null 2>&1 ; then
		debug "warn" "[WARN] "${COMPRESSOR}" not found" $LOG "${LOGFILE}"
		debug "warn" "[WARN] Disabling compression" $LOG "${LOGFILE}"
		COMPRESS=0
	else
		debug "info" "[INFO] Compression enabled" $LOG "${LOGFILE}"
	fi
else
	debug "info" "[INFO] Compression not enabled in ${CONFIG_FILE}" $LOG "${LOGFILE}"
fi



############################################################
# Encryption
############################################################
if [ -z "${ENCRYPT}" ]; then
	debug "warn" "[WARN] \$ENCRYPT variable is not set or empty in ${CONFIG_FILE}" $LOG "${LOGFILE}"
	debug "warn" "[WARN] Encryption disabled" $LOG "${LOGFILE}"
	ENCRYPT=0
fi
if [ "${ENCRYPT}" = "1" ]; then
	if ! command -v openssl > /dev/null 2>&1 ; then
		debug "err"  "[ERR]  'openssl' not found" $LOG "${LOGFILE}"
		debug "err"  "Aborting" $LOG "${LOGFILE}"
		exit 2
	fi
	if [ ! -f "${OPENSSL_PUBKEY_PEM}" ]; then
		debug "err"  "[ERR]  OpenSSL pubkey not found in ${OPENSSL_PUBKEY_PEM}" $LOG "${LOGFILE}"
		debug "err"  "Aborting" $LOG "${LOGFILE}"
		exit 2
	fi
	if [ -z "${OPENSSL_ALGO_ARG}" ]; then
		debug "warn" "[WARN] \$OPENSSL_ALGO_ARG variable is not set or empty in ${CONFIG_FILE}" $LOG "${LOGFILE}"
		debug "warn" "[WARN] Encryption defaults to: ${OPENSSL_ALGO_ARG}" $LOG "${LOGFILE}"
		OPENSSL_ALGO_ARG="${OPENSSL_ALGO_ARG_DEFAULT}"
	fi
	# Test openssl Algo
	if ! echo "test" | $(which openssl) smime -encrypt -binary -text -outform DER ${OPENSSL_ALGO_ARG} "${OPENSSL_PUBKEY_PEM}" > /dev/null 2>&1 ; then
		debug "err"  "[ERR]  openssl encryption test failed. Validate \$OPENSSL_ALGO_ARG" $LOG "${LOGFILE}"
		debug "err"  "Aborting" $LOG "${LOGFILE}"
		exit 2
	fi

	debug "info" "[INFO] Encryption enabled" $LOG "${LOGFILE}"

else
	debug "info" "[INFO] Encryption not enabled in ${CONFIG_FILE}" $LOG "${LOGFILE}"
fi



############################################################
# Deletion
############################################################
if [ -z "${DELETE}" ]; then
	debug "warn" "[WARN] \$DELETE variable is not set or empty in ${CONFIG_FILE}" $LOG "${LOGFILE}"
	debug "warn" "[WARN] Deletion of old files disabled" $LOG "${LOGFILE}"
	DELETE=0
fi
if [ "${DELETE}" = "1"  ]; then
	if [ -z "${DELETE_METHOD}" ]; then
		debug "warn" "[WARN] \$DELETE_METHOD variable is not set or empty in ${CONFIG_FILE}" $LOG "${LOGFILE}"
		debug "warn" "[WARN] Deletion of old files disabled" $LOG "${LOGFILE}"
		DELETE=0
	elif [ "${DELETE_METHOD}" = "tmpwatch" ] &&  ! command -v tmpwatch > /dev/null 2>&1 ; then
		debug "warn" "[WARN] 'tmpwatch' not found" $LOG "${LOGFILE}"
		debug "warn" "[WARN] Deletion of old files disabled" $LOG "${LOGFILE}"
		DELETE=0
	elif [ "${DELETE_METHOD}" = "tmpreaper" ] && ! command -v tmpreaper > /dev/null 2>&1 ; then
		debug "warn" "[WARN] 'tmpreaper' not found" $LOG "${LOGFILE}"
		debug "warn" "[WARN] Deletion of old files disabled" $LOG "${LOGFILE}"
		DELETE=0
	elif [ "${DELETE_METHOD}" != "tmpwatch" ] && [ "${DELETE_METHOD}" != 'tmpreaper' ]; then
		debug "warn" "[WARN] \$DELETE_METHOD must be either 'tmpwatch' or 'tmpreaper' in ${CONFIG_FILE}" $LOG "${LOGFILE}"
		debug "warn" "[WARN] Deletion of old files disabled" $LOG "${LOGFILE}"
		DELETE=0
	elif [ -z "${DELETE_IF_OLDER}" ]; then
		debug "warn" "[WARN] \$DELETE_IF_OLDER variable is not set or empty in ${CONFIG_FILE}" $LOG "${LOGFILE}"
		debug "warn" "[WARN] Deletion of old files disabled" $LOG "${LOGFILE}"
		DELETE=0
	elif ! isint "${DELETE_IF_OLDER}" > /dev/null 2>&1 ; then
		debug "warn" "[WARN] \$DELETE_IF_OLDER variable is not a valid integer" $LOG "${LOGFILE}"
		debug "warn" "[WARN] Deletion of old files disabled" $LOG "${LOGFILE}"
		DELETE=0
	elif [ "${DELETE_IF_OLDER}" -lt 1 ]; then
		debug "warn" "[WARN] \$DELETE_IF_OLDER is smaller than 1 hour" $LOG "${LOGFILE}"
		debug "warn" "[WARN] Deletion of old files disabled" $LOG "${LOGFILE}"
		DELETE=0
	else
		debug "info" "[INFO] Deletion enabled. Using: ${DELETE_METHOD}" $LOG "${LOGFILE}"
	fi
else
	debug "info" "[INFO] Deletion not enabled in ${CONFIG_FILE}" $LOG "${LOGFILE}"
fi

# Check for forced deletion
if [ "${DELETE}" = "1" ]; then
	if [ -z "${DELETE_FORCE}" ]; then
		debug "warn" "[WARN] \$DELETE_FORCE variable is not set or empty in ${CONFIG_FILE}" $LOG "${LOGFILE}"
		debug "warn" "[WARN] Setting \$DELETE_FORCE = 0" $LOG "${LOGFILE}"
		DELETE_FORCE=0
	elif ! isint "${DELETE_FORCE}" > /dev/null 2>&1 ; then
		debug "warn" "[WARN] \$DELETE_FORCE variable is not a valid integer" $LOG "${LOGFILE}"
		debug "warn" "[WARN] Setting \$DELETE_FORCE = 0" $LOG "${LOGFILE}"
		DELETE_FORCE=0
	elif [ "${DELETE_FORCE}" != "0" ] && [ "${DELETE_FORCE}" != "1" ]; then
		debug "warn" "[WARN] \$DELETE_FORCE variable invalid. Must be either 0 or 1." $LOG "${LOGFILE}"
		debug "warn" "[WARN] Setting \$DELETE_FORCE = 0" $LOG "${LOGFILE}"
		DELETE_FORCE=0
	fi


	if [ "${DELETE_FORCE}" = 1 ]; then
		debug "info" "[INFO] Using '--force' option for ${DELETE_METHOD}" $LOG "${LOGFILE}"
	else
		debug "info" "[INFO] Not forcing (--force) deletion on read-only files for ${DELETE_METHOD}" $LOG "${LOGFILE}"
	fi

fi



############################################################
# Nagios
############################################################
if [ -z "${NAGIOS_LOG}" ]; then
	debug "warn" "[WARN] \$NAGIOS_LOG variable is not set or empty in ${CONFIG_FILE}" $LOG "${LOGFILE}"
	debug "warn" "[WARN] Nagios plugin log disabled" $LOG "${LOGFILE}"
	NAGIOS_LOG=0
elif [ "${NAGIOS_LOG}" = "1"  ]; then
	if [ -z "${NAGIOS_LOGFILE}" ]; then
		debug "warn" "[WARN] \$NAGIOS_LOG variable is not set or empty in ${CONFIG_FILE}" $LOG "${LOGFILE}"
		debug "warn" "[WARN] Nagios plugin log disabled" $LOG "${LOGFILE}"
		NAGIOS_LOG=0
	elif [ ! -f "${NAGIOS_LOGFILE}" ]; then
		debug  "warn" "[WARN] ${NAGIOS_LOGFILE} not found" $LOG "${LOGFILE}"
		debugi "info" "[INFO] Trying to create..." $LOG "${LOGFILE}"

		if ! touch "${NAGIOS_LOGFILE}" > /dev/null 2>&1 ; then
			debugn "err"  "Failed" $LOG "${LOGFILE}"
			debug  "err"  "[ERR]  Failed to create file ${NAGIOS_LOGFILE}" $LOG "${LOGFILE}"
			debug  "warn" "[WARN] Nagios plugin log disabled" $LOG "${LOGFILE}"
			NAGIOS_LOG=0
		else
			debugn "info" "OK" $LOG "${LOGFILE}"
			debug  "info" "[INFO] Created file ${NAGIOS_LOGFILE}" $LOG "${LOGFILE}"
			debugi "info" "[INFO] Trying to chmod..." $LOG "${LOGFILE}"

			if ! chmod 644 "${NAGIOS_LOGFILE}" > /dev/null 2>&1 ; then
				debugn "err"  "Failed" $LOG "${LOGFILE}"
				debug  "err"  "[ERR]  Failed to chmod 644 ${NAGIOS_LOGFILE}" $LOG "${LOGFILE}"
				debug  "warn" "[WARN] Nagios plugin log disabled" $LOG "${LOGFILE}"
				NAGIOS_LOG=0
			else
				debugn "info" "OK" $LOG "${LOGFILE}"
				debug  "info" "[INFO] Nagios plugin log enabled" $LOG "${LOGFILE}"
			fi
		fi
	elif [ ! -r "${NAGIOS_LOGFILE}" ]; then
		debug "warn" "[WARN] ${NAGIOS_LOGFILE} not readable" $LOG "${LOGFILE}"
		debug "warn" "[WARN] Nagios plugin log disabled" $LOG "${LOGFILE}"
		NAGIOS_LOG=0
		# TODO: auto chmod
	elif [ ! -w "${NAGIOS_LOGFILE}" ]; then
		debug "warn" "[WARN] ${NAGIOS_LOGFILE} not writeable" $LOG "${LOGFILE}"
		debug "warn" "[WARN] Nagios plugin log disabled" $LOG "${LOGFILE}"
		NAGIOS_LOG=0
		# TODO: auto chmod
	elif [ "$(permission "${NAGIOS_LOGFILE}")" != "644" ]; then
		debug "warn" "[WARN] Nagios logfile ${NAGIOS_LOGFILE} has wrong permissions: $(permission "${NAGIOS_LOGFILE}")." $LOG "${LOGFILE}"
		debug "warn" "[WARN] Fix it to 644" $LOG "${LOGFILE}"
		debug "warn" "[WARN] Nagios plugin log disabled" $LOG "${LOGFILE}"
		# TODO: auto chmod
		NAGIOS_LOG=0
	else
		debug "info" "[INFO] Nagios plugin log enabled" $LOG "${LOGFILE}"
	fi
else
	debug "info" "[INFO] Nagios plugin log enabled" $LOG "${LOGFILE}"
fi



################################################################################
#
# ENTRY POINT: MAIN
#
################################################################################

# Binaries
MYSQL="$(which mysql)"
MYSQLDUMP="$(which mysqldump)"
GZIP="$(which "${COMPRESSOR}")"
OPENSSL="$(which openssl)"
TMPWATCH="$(which "${DELETE_METHOD}")"	# This can be tmpwatch or tmpreaper

ERROR=0



############################################################
# Get all databases
############################################################

# Get a list of all databases
debugi "info" "[INFO] Retrieving list of databases... " $LOG "${LOGFILE}"
#DATABASES="$( ${MYSQL} --defaults-extra-file="${MYSQL_CNF_FILE}" --batch -e 'show databases;' | sed 1d )"
DATABASES="$( ${MYSQL} --defaults-extra-file="${MYSQL_CNF_FILE}" --no-auto-rehash --skip-column-names -e 'SELECT DISTINCT table_schema FROM information_schema.tables;')"
NUM_DB="$(echo "${DATABASES}" | wc -l | tr -d ' ')"
debugn "info" "${NUM_DB}" $LOG "${LOGFILE}"



############################################################
# Dump databases
############################################################

TOTAL_STARTTIME=$(date +%s)
TOTAL_SIZE=0
TOTAL_DBS=0
TOTAL_IGN=0

# Get info for nagios log
NAGIOS_DB_DUMPED=""
NAGIOS_DB_IGNORED=""
NAGIOS_DB_ERROR=""


debug "info" "[INFO] Backup directory: ${TARGET}" $LOG "${LOGFILE}"

for db in ${DATABASES}; do

	# Skip specified databases
	skip=0
	for ign_db in ${IGNORE}; do
		if [ "${ign_db}" = "${db}" ]; then
			skip=1
		fi
	done

	if [ ${skip} -eq 0 ]; then

		# Check required databases
		for req in ${REQUIRE}; do
			# Required database found?
			# Remove from variable
			if [ "${db}" = "${req}" ]; then
				REQUIRE="$( echo "${REQUIRE}" | sed "s/${db}//" )"
			fi
		done

		DB_SIZE="$( ${MYSQL} --defaults-extra-file="${MYSQL_CNF_FILE}" --batch \
			-e "SELECT SUM(ROUND(((DATA_LENGTH + INDEX_LENGTH ) / 1024 / 1024),2)) AS Size
				FROM INFORMATION_SCHEMA.TABLES
				WHERE TABLE_SCHEMA = '${db}';" | tail -n1 )"

		TOTAL_SIZE=$( sum "${TOTAL_SIZE}" "${DB_SIZE}" )
		starttime=$(date +%s)
		ext=""	# file extension

		if [ ${COMPRESS} -eq 1 ]; then
			if [ ${ENCRYPT} -eq 1 ]; then
				ext=".sql."${COMPRESSOR_EXT}".enc"
				debugi "info"  "Dumping:  ${db} (${DB_SIZE} MB) (compressed) (encrypted) " $LOG "${LOGFILE}"

				# execute with POSIX pipestatus emulation (needs to get rid of shellcheck)
				exec 4>&1
				# shellcheck disable=SC2086
				error_statuses="$( (
					(${MYSQLDUMP} --defaults-extra-file="${MYSQL_CNF_FILE}" ${MYSQL_OPTS} "${db}" || echo "0:$?" >&3) |
					(${GZIP} --stdout -9 || echo "1:$?" >&3) |
					(${OPENSSL} smime -encrypt -binary -text -outform DER ${OPENSSL_ALGO_ARG} -out "${TARGET}/${PREFIX}${db}${ext}" "${OPENSSL_PUBKEY_PEM}" || echo "2:$?" >&3)
				) 3>&1 >&4)"
				exec 4>&-

			else
				ext=".sql."${COMPRESSOR_EXT}""
				debugi "info" "Dumping:  ${db} (${DB_SIZE} MB) (compressed) " $LOG "${LOGFILE}"

				# execute with POSIX pipestatus emulation (needs to get rid of shellcheck)
				exec 4>&1
				# shellcheck disable=SC2086
				error_statuses="$( (
					(${MYSQLDUMP} --defaults-extra-file="${MYSQL_CNF_FILE}" ${MYSQL_OPTS} "${db}" || echo "0:$?" >&3) |
					(${GZIP} -9 > "${TARGET}/${PREFIX}${db}${ext}" || echo "1:$?" >&3)
				) 3>&1 >&4)"
				exec 4>&-

			fi
		else
			if [ ${ENCRYPT} -eq 1 ]; then
				ext=".sql.enc"
				debugi "info" "Dumping:  ${db} (${DB_SIZE} MB) (encrypted) " $LOG "${LOGFILE}"

				# execute with POSIX pipestatus emulation (needs to get rid of shellcheck)
				exec 4>&1
				# shellcheck disable=SC2086
				error_statuses="$( (
					(${MYSQLDUMP} --defaults-extra-file="${MYSQL_CNF_FILE}" ${MYSQL_OPTS} "${db}" || echo "0:$?" >&3) |
					(${OPENSSL} smime -encrypt -binary -text -outform DER ${OPENSSL_ALGO_ARG} -out "${TARGET}/${PREFIX}${db}${ext}" "${OPENSSL_PUBKEY_PEM}" || echo "1:$?" >&3)
				) 3>&1 >&4)"
				exec 4>&-

			else
				ext=".sql"
				debugi "info" "Dumping:  ${db} (${DB_SIZE} MB) " $LOG "${LOGFILE}"

				# execute with POSIX pipestatus emulation (needs to get rid of shellcheck)
				exec 4>&1
				# shellcheck disable=SC2086
				error_statuses="$( (
					(${MYSQLDUMP} --defaults-extra-file="${MYSQL_CNF_FILE}" ${MYSQL_OPTS} "${db}" > "${TARGET}/${PREFIX}${db}${ext}" || echo "0:$?" >&3)
				) 3>&1 >&4)"
				exec 4>&-

			fi
		fi

		TOTAL_DBS=$((TOTAL_DBS + 1))


		# No errors in POSIX pipestatus emulation
		if [ -z "$error_statuses" ]; then
			endtime=$(date +%s)
			debugn "info" "$((endtime - starttime)) sec" $LOG "${LOGFILE}"
			chmod ${TARGET_FILE_CHMOD} "${TARGET}/${PREFIX}${db}${ext}"

			[ "${NAGIOS_DB_DUMPED}" = "" ] && NAGIOS_DB_DUMPED="${db}" || NAGIOS_DB_DUMPED="${NAGIOS_DB_DUMPED},${db}"
		else
			debugn "err"  "ERROR" $LOG "${LOGFILE}"
			ERROR=1

			[ "${NAGIOS_DB_ERROR}" = "" ] && NAGIOS_DB_ERROR="${db}" || NAGIOS_DB_ERROR="${NAGIOS_DB_ERROR},${db}"
		fi


	else
		debug "info" "Skipping: ${db}" $LOG "${LOGFILE}"
		TOTAL_IGN=$((TOTAL_IGN + 1))

		[ "${NAGIOS_DB_IGNORED}" = "" ] && NAGIOS_DB_IGNORED="${db}" || NAGIOS_DB_IGNORED="${NAGIOS_DB_IGNORED},${db}"

	fi
done
TOTAL_ENDTIME=$(date +%s)


for req in ${REQUIRE}; do
	debug "err"  "[ERR]  Required database: \"${req}\" has not been dumped." $LOG "${LOGFILE}"
	ERROR=1
done


debug "info" "[INFO] Dumping finished" $LOG "${LOGFILE}"
debug "info" "[INFO] Took $((TOTAL_ENDTIME - TOTAL_STARTTIME)) seconds" $LOG "${LOGFILE}"
debug "info" "[INFO] Total size dumped: ${TOTAL_SIZE} MB" $LOG "${LOGFILE}"



############################################################
# Delete old Files
############################################################
if [ ${DELETE} -eq 1 ]; then

	# Force deletion?
	[ "${DELETE_FORCE}" = "1" ] && FORCE_ARG="--force" || FORCE_ARG=""

	debug "info" "[INFO] Deleting files older than ${DELETE_IF_OLDER} hours" $LOG "${LOGFILE}"
	DELETED="$(${TMPWATCH} ${FORCE_ARG} -m "$DELETE_IF_OLDER" -v "${TARGET}/")"
	NUM_DEL="$( echo "${DELETED}" | grep -c 'removing' )"
	if [ $? -ne 0 ]; then
		ERROR=1
	fi
	debug "info" "${DELETED}" $LOG "${LOGFILE}"
fi



############################################################
# Nagios Plugin Log
############################################################
if [ "${NAGIOS_LOG}" = "1" ]; then
	debug "info" "[INFO] Writing nagios logfile" $LOG "${LOGFILE}"

	{
		echo "[state]";
		echo "success = ${ERROR}";
		echo "lastbak = ${TOTAL_STARTTIME}";
		echo "message = ";
		echo "missing = ${REQUIRE}";
		echo;
		echo "[options]";
		echo "opt_log = ${LOG}";
		echo "opt_com = ${COMPRESS}";
		echo "opt_enc = ${ENCRYPT}";
		echo "opt_del = ${DELETE}";
		echo;
		echo "[messages]";
		echo "msg_dbs = ${TOTAL_DBS}";
		echo "msg_ign = ${TOTAL_IGN}";
		echo "msg_meg = ${TOTAL_SIZE}";
		echo "msg_sec = $((TOTAL_ENDTIME - TOTAL_STARTTIME))";
		echo "msg_del = ${NUM_DEL}";
		echo;
		echo "[tmpwatch]";
	} > "${NAGIOS_LOGFILE}"

	if [ "${DELETE}" = "1" ]; then
		echo "del_time = ${DELETE_IF_OLDER}" >> "${NAGIOS_LOGFILE}"
	else
		echo "del_time = 0"	>> "${NAGIOS_LOGFILE}"
	fi

	{
		echo "[stats]";
		echo "db_dumped = ${NAGIOS_DB_DUMPED}";
		echo "db_error = ${NAGIOS_DB_ERROR}";
		echo "db_ignored = ${NAGIOS_DB_IGNORED}"
	} >> "${NAGIOS_LOGFILE}"

fi


###########################################################
# Post processing
###########################################################

if [ ! -z "${POST_SCRIPT}" ]; then
        eval "${POST_SCRIPT}"
fi

############################################################
# Exit
############################################################

if [ $ERROR -ne 0 ]; then
	# Send bad exit code
	debug "err"  "[FAIL] Finished with errors" $LOG "${LOGFILE}"
	exit 4
else
	# Send good exit code
	debug "info" "[OK]   Finished successfully" $LOG "${LOGFILE}"
	exit 0
fi
